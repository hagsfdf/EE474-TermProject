import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
from keras.models import load_model

brand = ['adidas','descente','fila','gucci','asics']
price = [59000, 99000, 186500]
# predicted brand or price -> one hot encoding
def argmax2onehot(trained):
    argmax = np.argmax(trained)
    shape = np.shape(trained)[-1]
    one_hot = np.zeros([1, shape],dtype = np.float32)

    one_hot[0][argmax] = 1
    return one_hot

# used for train price label by encoding one hot vector
def price_one_hot(price):
    if price < 59000:
        one_hot = [1, 0, 0, 0]
    elif price <= 99000:
        one_hot = [0, 1, 0, 0]
    elif price <= 186500:
        one_hot = [0, 0, 1, 0]
    else:
        one_hot = [0, 0, 0, 1]

    return one_hot

# used for train brand label by encoding one hot vector
def brand_one_hot(brand):
    category = ['adidas','descente','fila','gucci','asics']
    one_hot = np.isin(category, brand)
    one_hot = np.array(one_hot, dtype = np.float32)
    return one_hot


def onlyimage(img, model_brand, model_price):

    # predict brand of image
    x = np.expand_dims(img, axis=0)
    preds = model_brand.predict(x)

    brand = argmax2onehot(preds)

    # if only use image
    # preds = model_price.predict(x)

    # if use image and predticed brand
    preds = model_price.predict([x, brand])
    price = argmax2onehot(preds)

    return brand[0], price[0]



def main():

    basicDir = './imageBrand/train.npy'
    data = np.load(basicDir)

    print('data loading...')
    print(data[:13])


    correct_brand = 0.
    correct_price = 0.
    total = 0.

    img_path = './demo.png'
    img = cv2.imread(img_path)
    img = np.array(img, dtype='f')
    img = cv2.resize(img, dsize=(180,180))

    model_brand = load_model('model_brand_predictor.h5')
    model_price = load_model('model_price_predictor_with_brand.h5')

    pred_brand, pred_price = onlyimage(img, model_brand, model_price)

    print('Your expected brand is ' + brand[np.argmax(pred_brand)])
    if np.argmax(pred_price) == 0:
        print('Your expected price is below 59000')
    elif np.argmax(pred_price) == 1:
        print('Your expected price is above 59000, below 90000')
    elif np.argmax(pred_price) == 2:
        print('Your expected price is above 90000 below 186500')
    else:
        print('Your expected price is above 190000, very expensive!')


if __name__ == '__main__':
    main()

# brand : 94.8%
# price without brand : 82.3%
# price with pred_brand : 80.2%

# price without brand + aug : 77.1%
# price with pred_brand + aug : 75%
