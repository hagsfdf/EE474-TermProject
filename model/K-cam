import matplotlib.image as mpimg
from keras import backend as K
import matplotlib.pyplot as plt
from keras.models import load_model
from keras import backend as K
import numpy as np
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
import cv2

def cam(img_path):

    K.clear_session()

    model = load_model('model.h5')
    print(model.summary())
    img = mpimg.imread(img_path)
    plt.imshow(img)
    plt.show()

    img = image.load_img(img_path, target_size=(224, 224))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    preds = model.predict(x)

    argmax = np.argmax(preds[0])  # Q1. argmax of model prediction result
    output = model.output[:, argmax]
    last_conv_layer = model.get_layer('activation_48')  # Q2. what is block number & conv. layer number for last conv. layer?


    grads = K.gradients(output, last_conv_layer.output)[0]
    pooled_grads = K.mean(grads, axis=(0, 1, 2))
    iterate = K.function([model.input], [pooled_grads, last_conv_layer.output[0]])
    pooled_grads_value, conv_layer_output_value = iterate([x])
    for i in range(2048):  # Q3. How many iterations?
        conv_layer_output_value[:, :, i] *= pooled_grads_value[i]

    heatmap = np.mean(conv_layer_output_value, axis=-1)
    heatmap = np.maximum(heatmap, 0)
    heatmap /= np.max(heatmap)

    img = cv2.imread(img_path)
    heatmap = cv2.resize(heatmap, (img.shape[1], img.shape[0]))
    heatmap = np.uint8(255 * heatmap)
    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
    hif = .8
    superimposed_img = heatmap * hif + 0.6 *img  # Q4. superimpose heatmap and image
    output = 'output.jpeg'
    cv2.imwrite(output, superimposed_img)
    img = mpimg.imread(output)
    plt.imshow(img)
    plt.axis('off')
    plt.show()
    return None



def main():

    cam('./image/000001.jpg')

if __name__ == '__main__':
    main()
